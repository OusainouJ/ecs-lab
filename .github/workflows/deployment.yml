name: Deploy to AWS

on:
  workflow_dispatch:

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest
    outputs:
      ecr_repo: ${{ steps.terraform.outputs.ecr_repository_url }}
      ecs_cluster: ${{ steps.terraform.outputs.ecs_cluster_name }}
      ecs_service: ${{ steps.terraform.outputs.ecs_service_name }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: List files in terraform directory
        run: ls -la ./terraform

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        id: terraform
        run: |
          terraform apply -auto-approve
          echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV
          echo "ecs_cluster_name=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_ENV
          echo "ecs_service_name=$(terraform output -raw ecs_service_name)" >> $GITHUB_ENV
        working-directory: ./terraform

  push-image:
    name: Build & Push Docker Image
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Log in to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ env.ecr_repository_url }}

      - name: Remove previous image from ECR (if exists)
        run: |
          IMAGE_URI=${{ env.ecr_repository_url }}:latest
          aws ecr batch-delete-image --repository-name ${{ env.ecr_repo }} --image-ids imageTag=latest || echo "No previous image to delete"

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.ecr_repository_url }}:latest .

      - name: Push Docker Image
        run: |
          docker push ${{ env.ecr_repository_url }}:latest

  deploy-ecs:
    name: Deploy to ECS
    needs: push-image
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster ${{ env.ecs_cluster_name }} --service ${{ env.ecs_service_name }} --force-new-deployment
